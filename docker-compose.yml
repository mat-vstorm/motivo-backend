version: "3"

services:
    db:
        image: postgres:12
        volumes:
            - ./motivo_postgres:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
        networks:
            - private

    django:
        build:
            dockerfile: ./Dockerfile
            context: .
        command: bash -c "python manage.py makemigrations; python manage.py migrate; python manage.py setup_categories; python manage.py setup_groups; python manage.py collectstatic --noinput ; gunicorn practice.wsgi:application --bind 0.0.0.0:8000 --reload"
        volumes:
            - ./uploads:/code/uploads
            - ./app/practice/static:/static
            - ./app:/code
        depends_on:
            - db
        expose:
            - 8000
        # stdin_open: true
        # tty: true
        # restart: on-failure
        networks:
            - private
            - traefik_webgateway
        environment:
            DEBUG: 'true'
        labels:
            - traefik.enable=true
            - traefik.http.routers.${CONTAINER_NAME}-api-web.rule=Host(`${API_HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-api-web.entrypoints=web
            # - traefik.http.services.${CONTAINER_NAME}-api-web.loadbalancer.server.port=8000
            # https is optional, delete next lines when you don't need this
            - traefik.http.middlewares.${CONTAINER_NAME}-api-redirect-websecure.redirectscheme.scheme=https
            - traefik.http.routers.${CONTAINER_NAME}-api-web.middlewares=${CONTAINER_NAME}-api-redirect-websecure
            - traefik.http.routers.${CONTAINER_NAME}-api-websecure.rule=Host(`${API_HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-api-websecure.tls=true
            - traefik.http.routers.${CONTAINER_NAME}-api-websecure.entrypoints=websecure
        

    nginx_django:
        container_name: ${CONTAINER_NAME}nginx_django
        build:
            dockerfile: ./Nginx.Dockerfile
            context: .
        volumes:
            # - .:/code
            - ./app/practice/static:/static
        depends_on:
            - django
        networks:
            - private
            - traefik_webgateway
        # restart: "on-failure"
        labels:
            - traefik.enable=true
            - traefik.http.routers.${CONTAINER_NAME}-static-web.rule=Host(`${STATIC_URL}`)
            - traefik.http.routers.${CONTAINER_NAME}-static-web.entrypoints=web
            # - traefik.http.services.${CONTAINER_NAME}-static-web.loadbalancer.server.port=8000
            # https is optional, delete next lines when you don't need this
            - traefik.http.middlewares.${CONTAINER_NAME}-static-redirect-websecure.redirectscheme.scheme=https
            - traefik.http.routers.${CONTAINER_NAME}-static-web.middlewares=${CONTAINER_NAME}-static-redirect-websecure
            - traefik.http.routers.${CONTAINER_NAME}-static-websecure.rule=Host(`${STATIC_URL}`)
            - traefik.http.routers.${CONTAINER_NAME}-static-websecure.tls=true
            - traefik.http.routers.${CONTAINER_NAME}-static-websecure.entrypoints=websecure
    
    frontend:
        container_name: ${CONTAINER_NAME}_frontend
        build:
            dockerfile: ./Frontend.Dockerfile
            context: .
        depends_on:
            - django
        labels:
            - traefik.enable=true
            - traefik.http.routers.${CONTAINER_NAME}-app-web.rule=Host(`${HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-app-web.entrypoints=web
            # https is optional, delete next lines when you don't need this
            - traefik.http.middlewares.${CONTAINER_NAME}-app-redirect-websecure.redirectscheme.scheme=https
            - traefik.http.routers.${CONTAINER_NAME}-app-web.middlewares=${CONTAINER_NAME}-app-redirect-websecure
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.rule=Host(`${HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.tls=true
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.entrypoints=websecure
        networks:
            - private
            - traefik_webgateway
        volumes:
            - ./frontend/public/:/usr/share/nginx/html/
        cap_add:
            - SYS_PTRACE
        privileged: true
        # environment:
        #     - NGINX_PORT=80
        #     - WEB_DOCUMENT_ROOT=/app/dist
        #     - WEB_DOCUMENT_INDEX=index.html
            # - WEB_ALIAS_DOMAIN=${BACKEND_HOST}

    rabbitmq:
        image: rabbitmq:management-alpine
        hostname: rabbitmq
        restart: on-failure
        networks:
            - private
    
    celery_worker:
        build:
            dockerfile: ./Dockerfile
            context: .
        command: celery -A practice worker -l info --max-tasks-per-child=1
        environment:
            - DJANGO_SETTINGS_MODULE=practice.settings
        # volumes:
            # - .:/code
        restart: on-failure
        depends_on:
            - django
            - db
            - rabbitmq
        networks:
            - private

    celery_beat:
        build:
            dockerfile: ./Dockerfile
            context: .
        command: celery -A practice beat -l info
        environment:
            - DJANGO_SETTINGS_MODULE=practice.settings
        # volumes:
            # - .:/code
        depends_on:
            - django
            - db
            - rabbitmq
        restart: on-failure
        networks:
            - private

networks:
    traefik_webgateway:
        external: true
    private:
        driver: bridge

volumes:
    redis:
    motivo_postgres:
        external: true
